{"version":3,"sources":["components/Chart.js","components/Landing.js","App.js","reportWebVitals.js","index.js"],"names":["Chart","props","useState","selectedType","setSelectedType","unselectedType","setUnselectedType","chartOptions","scales","y","title","display","text","x","useEffect","console","log","lengthDist","chartDataDist","labels","datasets","label","data","backgroundColor","changeChartType","className","onClick","e","disclaimer","id","width","height","options","Landing","loading","setLoading","setText","wordCount","setWordCount","haveData","setHaveData","preCalculation","setPreCalculation","textAreaInput","setLengthDist","useArray","setUseArray","Container","Row","Col","md","span","offset","axios","get","then","res","story","catch","err","maxLength","onChange","target","value","handleTextAreaChange","search","alert","textArr","trim","split","length","forEach","objPos","replace","toString","getTextData","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.81a21a25.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Bar, Line } from 'react-chartjs-2';\n\nexport default function Chart(props) {\n    const [selectedType, setSelectedType] = useState('Bar');\n    const [unselectedType, setUnselectedType] = useState('Line');\n    const chartOptions= {\n        scales: {\n            y: {\n                title: { \n                    display: true,\n                    text: 'Frequency'\n                }\n            },\n            x: {\n                display: true,\n                title: {\n                    display: true,\n                    text: 'Number of letters in each word'\n                }\n            }\n        }\n    }\n\n    useEffect(() => {\n        console.log('in chart:')\n        console.log(props.lengthDist);\n    }, [])\n    const chartDataDist = {\n        labels: ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','20+'],\n        datasets: [\n            {\n                label: '*English Language',\n                // data:[2,93,754,3027,6110,10083,14424,16624,16551,14888,12008,8873,6113,3820,2323,1235,707,413,245,135,189],\n                // initial data taken from source https://arxiv.org/pdf/1207.2334.pdf, page 20, data in use sclaed down by 150\n                data: [\n                    0.013333333333333334,               0.62,\n                       5.026666666666666,              20.18,\n                      40.733333333333334,              67.22,\n                                   96.16, 110.82666666666667,\n                                  110.34,  99.25333333333333,\n                       80.05333333333333, 59.153333333333336,\n                       40.75333333333333, 25.466666666666665,\n                      15.486666666666666,  8.233333333333333,\n                       4.713333333333333, 2.7533333333333334,\n                      1.6333333333333333,                0.9,\n                                    1.26\n                  ],\n                backgroundColor: ['rgba(175,3,3,0.75)']\n            },\n            {\n                label: 'Sample Text',\n                data: props.lengthDist,\n                backgroundColor: ['rgba(3,3,175,0.75)']\n            }\n        ]\n    }\n\n    // toggle which option is available depending on which is currently displayed\n    const updateChartType = (e) => {\n        if (selectedType !== 'Bar') {\n            setSelectedType('Bar');\n            setUnselectedType('Line');\n        } else {\n            setSelectedType('Line');\n            setUnselectedType('Bar');\n        }\n    }\n\n    const title = <h2>Distribution of Words by Length</h2>\n\n    // toggle which option is available depending on which is currently displayed\n    const changeChartType = (\n        <button className=\"chartBtn\" onClick={e => {updateChartType(e)}}>Show {unselectedType} Graph</button>\n    )\n\n    const disclaimer = <div id=\"disclaimer\">*data taken from https://arxiv.org/pdf/1207.2334.pdf, page 20, scaled down by 150</div>\n\n    switch(selectedType) {\n        case 'Bar':\n            return (\n                <>\n                    {title}\n                    <Bar\n                        data={chartDataDist}\n                        width={100}\n                        height={50}\n                        options={chartOptions}\n                    />\n                    {disclaimer}\n                    {changeChartType}\n                </>    \n            );\n        case 'Line': \n            return (\n                <>\n                    {title}\n                    <Line\n                        data={chartDataDist}\n                        width={100}\n                        height={50}\n                        options={chartOptions}\n                    />\n                    {disclaimer}\n                    {changeChartType}\n                </>\n            );\n        default:\n            return (\n                <div>Nothing to show</div>\n            );\n    }\n}","import { useState } from \"react\";\nimport axios from \"axios\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Chart from \"./Chart\";\n\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\nexport default function Landing() {\n    const [loading, setLoading] = useState(false);\n    // loading for fetching text from API\n    const [text, setText] = useState('');\n    // set text to be calculated\n    const [wordCount, setWordCount] = useState(0);\n    const [haveData, setHaveData] = useState(false);\n    const [preCalculation, setPreCalculation] = useState(true);\n    // haveData &  preCalculation for conditional rendering\n    let textAreaInput = '';\n    const [lengthDist, setLengthDist] = useState([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);\n    // 21 placeholders, 1-20 & 20+\n    const [useArray, setUseArray] = useState([]);\n    // to nail doen array to send as props\n\n    const fetchStory = () => {\n        setLoading(true);\n        axios.get('https://shortstories-api.herokuapp.com/')\n            .then(res => {\n                setLoading(false);\n                console.log(\"story: \" + res.data.story);\n                setText(res.data.story);\n            }).catch(err => {\n                console.log(err);\n            })\n    }\n\n    const handleTextAreaChange = (e) => {\n        textAreaInput = e.target.value;\n    }\n\n    const submitTextAreaValue = () => {\n        if (textAreaInput.search(/[^a-zA-Z]/g)){\n            setText(textAreaInput);\n            // validate inputted text, set text state\n        } else {\n            alert('Please enter some letters');\n        }\n    }\n\n    const getTextData = () => {\n        let textArr = text.trim().split(' ');\n        setWordCount(textArr.length);\n        setHaveData(true);\n        // again, for conditional rendering\n        textArr.forEach(e => {\n            let l = e.replace(/[^a-zA-Z]/g,\"\").length;\n            // remove any punctuation/non-letters\n            let objPos = l.toString();\n            if (objPos <= 20 && objPos != 0) {\n                setLengthDist(lengthDist[objPos-1]+=1);\n            } else if (objPos > 20) {\n                setLengthDist(lengthDist[20]+=1);\n            }\n            setUseArray(lengthDist);\n            //lengthDist was converting type when passed as props, so useArray was my solution so capturing the necessary data\n        })\n    }\n\n    const showDistribution = () => {\n        setPreCalculation(false);\n        // previously used for debugging purposes, current use is update conditional rendering\n    }\n\n    const startOver = () => {\n        // reset state, start from beginning\n        setText('');\n        setWordCount(0);\n        setHaveData(false);\n        setPreCalculation(true);\n        setLengthDist([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);\n        setUseArray([]);\n    }\n\n    return (\n        <>\n            {text === '' ? (\n                    <section id=\"chooseText\">\n                        {loading === false ? (\n                            <>\n                                <Container>\n                                    <Row>\n                                        <Col md={{span: 8, offset: 2}}>\n                                            <p>This application begins by calculating the distribution of the length of every word in a sample of text. That distribution will then be compared the distribution of word length for all words in the English language.</p>\n                                            <h3>Please choose a method for importing sample text:</h3>\n                                        </Col>\n                                    </Row>\n                                    <Row>\n                                        <Col md={{span: 1, offset: 3}}>\n                                            <h4>1.</h4>\n                                        </Col>\n                                        <Col md='4'>\n                                            <button onClick={() => {fetchStory()}}>Fetch text from API</button>\n                                        </Col>\n                                    </Row>\n                                    <Row>\n                                        <Col md={{span: 1, offset: 3}}>\n                                            <h4>2.</h4>\n                                        </Col>\n                                        <Col md='5'>\n                                            <h5>Type or paste text here:</h5>\n                                            <div><textarea id=\"copiedText\" maxLength=\"2000\" onChange={e => {handleTextAreaChange(e)}}></textarea></div>\n                                            <button onClick={() => {submitTextAreaValue()}}>Use provided text</button>\n                                        </Col>\n                                    </Row>\n                                </Container>\n                            </>\n                            ) : (\n                                <div className=\"loader\"></div>\n                            )}\n                    </section>\n                ) : (\n                    <section>\n                        <div id=\"textSampleLabel\">Text Sample:</div>\n                        <div id=\"selectedText\">{text}</div>\n                        {haveData === false ? (\n                            <button onClick={() => {getTextData()}}>Use this text</button>\n                        ) : (\n                            <div>\n                                {preCalculation === true ? (\n                                    <>\n                                        <h2>Data Calculated!</h2>\n                                        <h6>{wordCount} words in the sample</h6>\n                                        <button onClick={() => {showDistribution()}}>Show distribution</button>\n                                    </>\n                                    ) : (\n                                        <>\n                                            <h6>{wordCount} words in the sample</h6>\n                                            <Chart lengthDist={useArray}/>\n                                        </>\n                                    )\n                                }\n                            </div>\n                        )}\n                        <div><button onClick={() => {startOver()}}>Enter different text</button></div>\n                    </section>\n                )\n            }\n        </>\n    )\n    \n}","import './App.css';\nimport Landing from './components/Landing';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Landing />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}